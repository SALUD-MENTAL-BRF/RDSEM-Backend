// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String
  email String @unique
  password String?

  googleId String?
  imageUrl String?

  // Relaciones
  rol Role @relation(fields: [roleId], references: [id])
  roleId Int @default(1)

  patient Patient[]
  professional Professional[]
  // requestProfessional RequestProfessional[]
  publication Publication[]
  notes Note[] // Relaci√≥n inversa a las notas
}

model Note {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model Role {
  id Int @id @default(autoincrement())
  type String

  // Relaciones
  user User[]
}

model HistoryPatient {
  id Int @id @default(autoincrement())

  // Relaciones
  patient Patient @relation(fields: [patientId], references: [id])
  patientId Int
}

model Patient {
  id Int @id @default(autoincrement())
  type String
  fullName String

  // Relaciones
  user User @relation(fields: [userId], references: [id])
  userId Int
  professional Professional[]
  historyPatient9 HistoryPatient[]
}

model Professional {
  id Int @id @default(autoincrement())
  firstname String
  lastname String
  title String
  specialization String
  tuition Int
  birthdate DateTime


  // Relaciones
  user User @relation(fields: [userId], references: [id]) 
  userId Int
  patient Patient[]
    profileProfessional ProfileProfessional[]
}

// model RequestProfessional {
//   id Int @id @default(autoincrement())
//   fullname String
//   title String
//   specialization String
//   experience String
//   tuition Int
  
//   // Relaciones
//   user User @relation(fields: [userId], references: [id])
//   userId Int
// }

model ProfileProfessional {
  id Int @id @default(autoincrement())
  description String @default("")
  availability Boolean @default(false)
  preference_communication String @default("")
  url_image String @default("")

  //Relaciones
  professional Professional @relation(fields: [professionalId], references: [id])
  professionalId Int
}

model Publication {
  id Int @id @default(autoincrement())
  title String
  content String

  // Relaciones
  user User @relation(fields: [userId], references: [id])
  userId Int
}
