// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVO
  INACTIVO
}

enum TypeHospital {
  Publico
  Privado
}

model User {
  id          Int          @id @default(autoincrement())
  username    String
  email       String       @unique
  password    String?
  googleId    String?
  imageUrl    String?
  updatedAt   DateTime     @updatedAt
  createdAt   DateTime     @default(now())
  status      UserStatus   @default(ACTIVO) // Por defecto "ACTIVO"

  // Relaciones
  rol         Role         @relation(fields: [roleId], references: [id])
  roleId      Int          @default(3)

  patient Patient[]
  professional Professional[]
  publication Publication[]
  notes Note[] // Relación inversa a las notas
  requeset_patient Request_patient[]
  
  // Relación con Hospital
  hospital    Hospital?    // Este campo es el inverso, no requiere `@relation`
}

model Note {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model Role {
  id Int @id @default(autoincrement())
  type String

  // Relaciones
  user User[]
}

model HistoryPatient {
  id Int @id @default(autoincrement())
  
  // Relaciones
  patient Patient @relation(fields: [patientId], references: [id])
  patientId Int
}

model Patient {
  id Int @id @default(autoincrement())
  fullName String
  date_birth String
  genre String
  address String
  telephone String
  contactEmergencyName String
  contactEmergencyRelation String
  contactEmergencyTelephone String
  reasonConsultation String
  descriptionProblem String
  diagnosesPrevious String
  treatmentsPrevious String
  hospitalizationsPrevious String
  meciationCurrent String
  historyConsumption String
  historyDiseases String
  histoyFamily String

  // Relaciones
  user User @relation(fields: [userId], references: [id])
  userId Int
  professional Professional[]
  historyPatient9 HistoryPatient[]
}


model Request_patient {
  id Int @id @default(autoincrement())
  fullName String
  date_birth String
  genre String
  address String
  telephone String
  contactEmergencyName String
  contactEmergencyRelation String
  contactEmergencyTelephone String
  reasonConsultation String
  descriptionProblem String
  diagnosesPrevious String
  treatmentsPrevious String
  hospitalizationsPrevious String
  meciationCurrent String
  historyConsumption String
  historyDiseases String
  histoyFamily String

  //Relations

  user User @relation(fields: [userId], references: [id])
  userId Int
  professional Professional @relation(fields: [professionalId], references: [id])
  professionalId Int
}


model Professional {
  id Int @id @default(autoincrement())
  firstname String
  lastname String
  title String
  specialization String
  tuition Int
  birthdate String

  // Relaciones
  user User @relation(fields: [userId], references: [id]) 
  userId Int
  patient Patient[]
  profile ProfileProfessional?
  request_patient Request_patient[]
}

model ProfileProfessional {
  id Int @id @default(autoincrement())
  description String @default("")
  availability Boolean @default(false)
  preference_communication String @default("")

  // Relaciones
  professional Professional @relation(fields: [professionalId], references: [id])
  professionalId Int @unique
}



// model RequestProfessional {
//   id Int @id @default(autoincrement())
//   fullname String
//   title String
//   specialization String
//   experience String
//   tuition Int
  
//   // Relaciones
//   user User @relation(fields: [userId], references: [id])
//   userId Int
// }



model Publication {
  id Int @id @default(autoincrement())
  title String
  content String

  // Relaciones
  user User @relation(fields: [userId], references: [id])
  userId Int
}


// ----------------------------------------------------------------
// Modelo para las hospitales
// ----------------------------------------------------------------

model Hospital {
  id           Int              @id @default(autoincrement())
  name         String           
  address      String           
  telephone    String           
  email        String           
  website      String?          
  director     String?          
  openingHours String           
  type         TypeHospital     
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  specialties  SpecialtiesOnHospitals[]
  services     ServicesOnHospitals[]

  // Campo para almacenar el ID del usuario con el rol de hospital
  userId       Int              @unique // Relación uno a uno, debe ser único
  user         User             @relation(fields: [userId], references: [id])
}

model Specialty {
  id        Int                       @id @default(autoincrement())
  name      String                    @unique
  hospitals SpecialtiesOnHospitals[]
}

model Service {
  id        Int                       @id @default(autoincrement())
  name      String                    @unique 
  hospitals ServicesOnHospitals[]
}

model SpecialtiesOnHospitals {
  hospitalId   Int
  specialtyId  Int
  hospital     Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  specialty    Specialty @relation(fields: [specialtyId], references: [id])

  @@id([hospitalId, specialtyId])
}

model ServicesOnHospitals {
  hospitalId   Int
  serviceId    Int
  hospital     Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  service      Service @relation(fields: [serviceId], references: [id])

  @@id([hospitalId, serviceId])
}

// ----------------------------------------------------------------
// ----------------------------------------------------------------
// ----------------------------------------------------------------