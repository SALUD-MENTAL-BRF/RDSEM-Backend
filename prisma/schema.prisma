// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVO
  INACTIVO
}

model User {
  id          Int          @id @default(autoincrement())
  username    String
  email       String       @unique
  password    String?
  googleId    String?
  imageUrl    String?
  updatedAt   DateTime     @updatedAt
  createdAt   DateTime     @default(now())
  status      UserStatus   @default(ACTIVO) // Por defecto "ACTIVO"

  // Relaciones
  rol         Role         @relation(fields: [roleId], references: [id])
  roleId      Int          @default(3)

  patient Patient[]
  professional Professional[]
  // requestProfessional RequestProfessional[]
  publication Publication[]
  notes Note[] // Relaci√≥n inversa a las notas
  requeset_patient Request_patient[]
}

model Note {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model Role {
  id Int @id @default(autoincrement())
  type String

  // Relaciones
  user User[]
}

model HistoryPatient {
  id Int @id @default(autoincrement())
  
  // Relaciones
  patient Patient @relation(fields: [patientId], references: [id])
  patientId Int
}

model Patient {
  id Int @id @default(autoincrement())
  fullName String
  date_birth String
  genre String
  telephone String
  contactEmergencyName String
  contactEmergencyRelation String
  contactEmergencyTelephone String
  streetNumber String
  neighborhood String

  // Relaciones
  user User @relation(fields: [userId], references: [id])
  userId Int
  professional Professional[]
  historyPatient HistoryPatient[]
  locality Locality @relation(fields: [localityId], references: [id])
  localityId Int
  recommendation Recommendation[]
  infoPatient InfoPatient[]
  activityXPatient ActivityXPatient []
  socialHabilitySetting SocialHabilitySetting[]
  socialHabilityHistory SocialHabilityHistory[]
}

model InfoPatient {
  id Int @id @default(autoincrement())
  reasonConsultation String
  descriptionProblem String
  diagnosesPrevious String
  treatmentsPrevious String
  hospitalizationsPrevious String
  meciationCurrent String
  historyConsumption String
  historyDiseases String
  histoyFamily String

  patient Patient @relation(fields: [patientId], references: [id])
  patientId Int
  professional Professional @relation(fields: [professionalId], references: [id])
  professionalId Int
}

model Request_patient {
  id Int @id @default(autoincrement())
  fullName String
  date_birth String
  genre String
  telephone String
  contactEmergencyName String
  contactEmergencyRelation String
  contactEmergencyTelephone String
  reasonConsultation String
  descriptionProblem String
  diagnosesPrevious String
  treatmentsPrevious String
  hospitalizationsPrevious String
  meciationCurrent String
  historyConsumption String
  historyDiseases String
  histoyFamily String
  streetNumber String
  neighborhood String

  //Relations
  locality Locality @relation(fields: [localityId], references: [id])
  localityId Int 
  user User @relation(fields: [userId], references: [id])
  userId Int
  professional Professional @relation(fields: [professionalId], references: [id])
  professionalId Int
}


model Professional {
  id Int @id @default(autoincrement())
  firstname String
  lastname String
  title String
  specialization String
  tuition Int
  birthdate String

  // Relaciones
  user User @relation(fields: [userId], references: [id]) 
  userId Int
  patient Patient[]
  profile ProfileProfessional?
  request_patient Request_patient[]
  recommendation Recommendation[]
  infoPatient InfoPatient[]
  activityXPatient ActivityXPatient[]
  socialHabilitySetting SocialHabilitySetting[]
  socialHabilityHistory SocialHabilityHistory[]
}

model ProfileProfessional {
  id Int @id @default(autoincrement())
  description String @default("")
  availability Boolean @default(false)
  preference_communication String @default("")

  // Relaciones
  professional Professional @relation(fields: [professionalId], references: [id])
  professionalId Int @unique
}



// model RequestProfessional {4
//   id Int @id @default(autoincrement())
//   fullname String
//   title String
//   specialization String
//   experience String
//   tuition Int
  
//   // Relaciones
//   user User @relation(fields: [userId], references: [id])
//   userId Int
// }


model Activities {
  id Int @id @default(autoincrement())
  title String
  description String
  categoryActivities CategoryActivities @relation(fields: [categoryActivitiesId], references: [id])
  categoryActivitiesId Int
  disorder Disorder @relation(fields: [disorderId], references: [id])
  disorderId Int
  active Boolean

  activityXPatient ActivityXPatient[]
}

model CategoryActivities {
  id Int @id @default(autoincrement())
  type String

  disorder Disorder @relation(fields: [disorderId], references: [id])
  disorderId Int
  activities Activities[]
}

model ActivityXPatient {
  id Int @id @default(autoincrement())

  activity Activities @relation(fields: [activityId], references: [id])
  activityId Int

  patient Patient @relation(fields: [patientId], references: [id])
  patientId Int

  professional Professional @relation(fields: [professionalId], references: [id])
  professionalId Int
}

model SocialHabilitySetting {
  id Int @id @default(autoincrement())

  age String
  genre String
  complexity String
  personality String

  patient Patient @relation(fields: [patientId], references: [id])
  patientId Int
  professional Professional @relation(fields: [professionalId], references: [id])
  professionalId Int
}

model SocialHabilityHistory {
  id Int @id @default(autoincrement())

  stage String
  responses Json
  explanation String
  createdAt  DateTime @default(now())

  patientId Int
  patient Patient @relation(fields: [patientId], references: [id])
  professionalId Int
  professional Professional @relation(fields: [professionalId], references: [id])
}


model Publication {
  id Int @id @default(autoincrement())
  title String
  content String

  // Relaciones
  user User @relation(fields: [userId], references: [id])
  userId Int
}

model Province {
  id Int @id @default(autoincrement())
  name String

  locality Locality[]
}

model Locality {
  id Int @id @default(autoincrement())
  name String

  province Province @relation(fields: [provinceId], references: [id])
  provinceId Int
  request_patient Request_patient[]
  patient Patient[]
}

model Recommendation {
  id Int @id @default(autoincrement())
  title  String
  description String

  patient Patient @relation(fields: [patientId], references: [id])
  patientId Int
  professional Professional @relation(fields: [professionalId], references: [id])
  professionalId Int
}

model Disorder {
  id Int @id @default(autoincrement())
  type String

  activities Activities[]
  categoryActivities CategoryActivities[]
}